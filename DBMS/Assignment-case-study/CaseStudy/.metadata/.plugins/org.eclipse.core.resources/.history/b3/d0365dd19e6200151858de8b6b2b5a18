package com.metacampus.vehiclemanagement.helper;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;

import org.hamcrest.core.IsInstanceOf;

import com.metacampus.vehiclemanagement.model.Bike;
import com.metacampus.vehiclemanagement.model.Car;
import com.metacampus.vehiclemanagement.model.Vehicle;
import com.metacampus.vehiclemanagement.utils.ConnectionUtil;

public class VehicleJDBCHelper {
	
	public static void insert(Vehicle vehicle) {
		try {
			String created_by = vehicle.getCreated_by();
			Date created_time = vehicle.getCreated_time();
			String make = vehicle.getMake();
			String model = vehicle.getModel();
			String engineInCC = vehicle.getEngineiInCC();
			String fuelCapacity = ""+vehicle.getFuelCapacity();
			String mileage = vehicle.getMileage();
			float price = vehicle.getPrice();
			double roadTax = vehicle.getRoadTax();
			String ac = "";
			String powerSteering = "";
			String accessoryKit = "";
			String selfStart = "";
			float helmetPrice;
			String query = "INSERT INTO vehicle VALUES(?,?,?,?,?,?,?,?,?)";
			Connection con = ConnectionUtil.getConnection();
			PreparedStatement preparedStmt = con.prepareStatement(query);
			preparedStmt.setString(1, created_by);
			preparedStmt.setDate(2, created_time);
			preparedStmt.setString(3, make);
			preparedStmt.setString(4, model);
			preparedStmt.setString(5, engineInCC);
			preparedStmt.setString(6, fuelCapacity);
			preparedStmt.setString(7, mileage);
			preparedStmt.setFloat(8, price);
			preparedStmt.setDouble(9, roadTax);
			
			Statement stmt = con.createStatement();
			
			query = "SELECT vehicle_id FROM vehicle ORDER BY vehicle_id DESC";
			
			int vehicle_id = 0;
			ResultSet rs = stmt.executeQuery(query);
			
			if(rs.next()) {
				vehicle_id = rs.getInt("vehicle_id");
			}
			
			if(vehicle instanceof Car) {
				query = "INSERT INTO car VALUES(?,?,?,?)";
				Car car = (Car)vehicle;
				ac = ac+car.isAC();
				powerSteering = powerSteering + car.isPowerSteering();
				accessoryKit = accessoryKit + car.isAccessoryKit();
				preparedStmt = con.prepareStatement(query);
				preparedStmt.setString(1, ac);
				preparedStmt.setString(2, powerSteering);
				preparedStmt.setString(3,  accessoryKit);
				preparedStmt.setInt(4, vehicle_id);
			}
			else if(vehicle instanceof Bike) {
				Bike bike = (Bike)vehicle;
				selfStart = selfStart + bike.isSelfStart();
				helmetPrice = bike.getHelmetPrice();
				
				query = "INSERT INTO bike VALUES(?,?,?)";
				
				preparedStmt = con.prepareStatement(query);
				preparedStmt.setString(1, selfStart);
				preparedStmt.setFloat(2, helmetPrice);
				preparedStmt.setInt(3, vehicle_id);
			}
			else {
				System.out.println("Can't create vehicle object. It is not correct type");
			}
		}
		catch(Exception e) {
			System.out.println(e.getMessage());
		}
	}
}
